/*
* generated by Xtext
*/
grammar InternalYCL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.csstudio.yamcs.ycl.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.csstudio.yamcs.ycl.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.csstudio.yamcs.ycl.dsl.services.YCLGrammarAccess;

}

@parser::members {
 
 	private YCLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(YCLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getCommandsAssignment()); }
(rule__Model__CommandsAssignment)*
{ after(grammarAccess.getModelAccess().getCommandsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleREAL
entryRuleREAL 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getREALAccess().getGroup()); }
(rule__REAL__Group__0)
{ after(grammarAccess.getREALAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandAccess().getGroup()); }
(rule__Command__Group__0)
{ after(grammarAccess.getCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommandId
entryRuleCommandId 
:
{ before(grammarAccess.getCommandIdRule()); }
	 ruleCommandId
{ after(grammarAccess.getCommandIdRule()); } 
	 EOF 
;

// Rule CommandId
ruleCommandId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandIdAccess().getIdAssignment()); }
(rule__CommandId__IdAssignment)
{ after(grammarAccess.getCommandIdAccess().getIdAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgumentAssignment
entryRuleArgumentAssignment 
:
{ before(grammarAccess.getArgumentAssignmentRule()); }
	 ruleArgumentAssignment
{ after(grammarAccess.getArgumentAssignmentRule()); } 
	 EOF 
;

// Rule ArgumentAssignment
ruleArgumentAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentAssignmentAccess().getGroup()); }
(rule__ArgumentAssignment__Group__0)
{ after(grammarAccess.getArgumentAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgumentAssignmentValue
entryRuleArgumentAssignmentValue 
:
{ before(grammarAccess.getArgumentAssignmentValueRule()); }
	 ruleArgumentAssignmentValue
{ after(grammarAccess.getArgumentAssignmentValueRule()); } 
	 EOF 
;

// Rule ArgumentAssignmentValue
ruleArgumentAssignmentValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentAssignmentValueAccess().getAlternatives()); }
(rule__ArgumentAssignmentValue__Alternatives)
{ after(grammarAccess.getArgumentAssignmentValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__REAL__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREALAccess().getEXT_INTTerminalRuleCall_2_0()); }
	RULE_EXT_INT
{ after(grammarAccess.getREALAccess().getEXT_INTTerminalRuleCall_2_0()); }
)

    |(
{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2_1()); }
	RULE_INT
{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentAssignmentValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAssignmentValueAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getArgumentAssignmentValueAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getArgumentAssignmentValueAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getArgumentAssignmentValueAccess().getINTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getArgumentAssignmentValueAccess().getHEXTerminalRuleCall_2()); }
	RULE_HEX
{ after(grammarAccess.getArgumentAssignmentValueAccess().getHEXTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getArgumentAssignmentValueAccess().getREALParserRuleCall_3()); }
	ruleREAL
{ after(grammarAccess.getArgumentAssignmentValueAccess().getREALParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__REAL__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREALAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREALAccess().getAlternatives_2()); }
(rule__REAL__Alternatives_2)
{ after(grammarAccess.getREALAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Command__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getNameAssignment_0()); }
(rule__Command__NameAssignment_0)
{ after(grammarAccess.getCommandAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getGroup_1()); }
(rule__Command__Group_1__0)?
{ after(grammarAccess.getCommandAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Command__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group_1__0__Impl
	rule__Command__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getCommandAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group_1__1__Impl
	rule__Command__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getAssignmentsAssignment_1_1()); }
(rule__Command__AssignmentsAssignment_1_1)*
{ after(grammarAccess.getCommandAccess().getAssignmentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getCommandAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ArgumentAssignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentAssignment__Group__0__Impl
	rule__ArgumentAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentAssignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAssignmentAccess().getNameAssignment_0()); }
(rule__ArgumentAssignment__NameAssignment_0)
{ after(grammarAccess.getArgumentAssignmentAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentAssignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentAssignment__Group__1__Impl
	rule__ArgumentAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentAssignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAssignmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getArgumentAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentAssignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentAssignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAssignmentAccess().getValueAssignment_2()); }
(rule__ArgumentAssignment__ValueAssignment_2)
{ after(grammarAccess.getArgumentAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__CommandsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_0()); }
	ruleCommand{ after(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getNameCommandIdParserRuleCall_0_0()); }
	ruleCommandId{ after(grammarAccess.getCommandAccess().getNameCommandIdParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__AssignmentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getAssignmentsArgumentAssignmentParserRuleCall_1_1_0()); }
	ruleArgumentAssignment{ after(grammarAccess.getCommandAccess().getAssignmentsArgumentAssignmentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommandId__IdAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandIdAccess().getIdIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getCommandIdAccess().getIdIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentAssignment__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAssignmentAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getArgumentAssignmentAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentAssignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAssignmentAccess().getValueArgumentAssignmentValueParserRuleCall_2_0()); }
	ruleArgumentAssignmentValue{ after(grammarAccess.getArgumentAssignmentAccess().getValueArgumentAssignmentValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_EXT_INT : RULE_INT ('e'|'E') ('-'|'+') RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


