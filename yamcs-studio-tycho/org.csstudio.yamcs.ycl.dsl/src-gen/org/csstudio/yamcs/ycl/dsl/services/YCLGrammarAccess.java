/*
* generated by Xtext
*/
package org.csstudio.yamcs.ycl.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class YCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		//Model:
		//	commands+=Command*;
		public ParserRule getRule() { return rule; }

		//commands+=Command*
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_0() { return cCommandsCommandParserRuleCall_0; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cEXT_INTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//// INT ? '.' (EXT_INT | INT);
		//REAL hidden():
		//	INT "." (EXT_INT | INT);
		public ParserRule getRule() { return rule; }

		//INT "." (EXT_INT | INT)
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//EXT_INT | INT
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//EXT_INT
		public RuleCall getEXT_INTTerminalRuleCall_2_0() { return cEXT_INTTerminalRuleCall_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameCommandIdParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignmentsArgumentAssignmentParserRuleCall_1_1_0 = (RuleCall)cAssignmentsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Command:
		//	name=CommandId ("(" assignments+=ArgumentAssignment* ")")?;
		public ParserRule getRule() { return rule; }

		//name=CommandId ("(" assignments+=ArgumentAssignment* ")")?
		public Group getGroup() { return cGroup; }

		//name=CommandId
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//CommandId
		public RuleCall getNameCommandIdParserRuleCall_0_0() { return cNameCommandIdParserRuleCall_0_0; }

		//("(" assignments+=ArgumentAssignment* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//assignments+=ArgumentAssignment*
		public Assignment getAssignmentsAssignment_1_1() { return cAssignmentsAssignment_1_1; }

		//ArgumentAssignment
		public RuleCall getAssignmentsArgumentAssignmentParserRuleCall_1_1_0() { return cAssignmentsArgumentAssignmentParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class CommandIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommandId");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//CommandId:
		//	id=ID;
		public ParserRule getRule() { return rule; }

		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}

	public class ArgumentAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueArgumentAssignmentValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ArgumentAssignment:
		//	name=ID "=" value=ArgumentAssignmentValue;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=ArgumentAssignmentValue
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=ArgumentAssignmentValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ArgumentAssignmentValue
		public RuleCall getValueArgumentAssignmentValueParserRuleCall_2_0() { return cValueArgumentAssignmentValueParserRuleCall_2_0; }
	}

	public class ArgumentAssignmentValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentAssignmentValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cREALParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ArgumentAssignmentValue:
		//	STRING | INT | HEX | REAL;
		public ParserRule getRule() { return rule; }

		//STRING | INT | HEX | REAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_2() { return cHEXTerminalRuleCall_2; }

		//REAL
		public RuleCall getREALParserRuleCall_3() { return cREALParserRuleCall_3; }
	}
	
	
	private final ModelElements pModel;
	private final REALElements pREAL;
	private final TerminalRule tEXT_INT;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tHEX;
	private final TerminalRule tSTRING;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final CommandElements pCommand;
	private final CommandIdElements pCommandId;
	private final ArgumentAssignmentElements pArgumentAssignment;
	private final ArgumentAssignmentValueElements pArgumentAssignmentValue;
	
	private final Grammar grammar;

	@Inject
	public YCLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pREAL = new REALElements();
		this.tEXT_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXT_INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.pCommand = new CommandElements();
		this.pCommandId = new CommandIdElements();
		this.pArgumentAssignment = new ArgumentAssignmentElements();
		this.pArgumentAssignmentValue = new ArgumentAssignmentValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.csstudio.yamcs.ycl.dsl.YCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	commands+=Command*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// INT ? '.' (EXT_INT | INT);
	//REAL hidden():
	//	INT "." (EXT_INT | INT);
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//terminal EXT_INT:
	//	INT ("e" | "E") ("-" | "+") INT;
	public TerminalRule getEXT_INTRule() {
		return tEXT_INT;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal HEX returns ecore::EInt:
	//	"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return tHEX;
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//Command:
	//	name=CommandId ("(" assignments+=ArgumentAssignment* ")")?;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//CommandId:
	//	id=ID;
	public CommandIdElements getCommandIdAccess() {
		return pCommandId;
	}
	
	public ParserRule getCommandIdRule() {
		return getCommandIdAccess().getRule();
	}

	//ArgumentAssignment:
	//	name=ID "=" value=ArgumentAssignmentValue;
	public ArgumentAssignmentElements getArgumentAssignmentAccess() {
		return pArgumentAssignment;
	}
	
	public ParserRule getArgumentAssignmentRule() {
		return getArgumentAssignmentAccess().getRule();
	}

	//ArgumentAssignmentValue:
	//	STRING | INT | HEX | REAL;
	public ArgumentAssignmentValueElements getArgumentAssignmentValueAccess() {
		return pArgumentAssignmentValue;
	}
	
	public ParserRule getArgumentAssignmentValueRule() {
		return getArgumentAssignmentValueAccess().getRule();
	}
}
